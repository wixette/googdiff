#!/usr/bin/env python3
"""Command-line diff tool, a wrapper of Google's diff-match-patch module.
"""

import argparse
import tempfile
import webbrowser


from console import fg, bg, fx
from diff_match_patch import diff_match_patch as dmp


RET_CHAR = '\n'
PILCROW_CHAR = '\u00B6'
PATH1_PREFIX = '<<< '
PATH2_PREFIX = '>>> '


DIFF_HTML_TMP = u'''
<!doctype html>
<html>
<head>
<meta charset="utf-8">
<style>
body{font-family:"Lucida Console",Monaco,"Courier New",Courier, monospace;
font-size:14px;padding:20px;}
h1{font-size:14px;border-bottom:#ccc solid 1px;margin-bottom:20px;}
p{font-family:"Lucida Console",Monaco,"Courier New",Courier, monospace;
font-size:14px;line-height:22px;}
</style>
</head>
<body>
<h1>diff between "%(file1)s" and "%(file2)s"</h2>
<p>%(text)s</p>
</body>
</html>
'''


class Printer(object):
    """The base class of diff printers.
    """
    def __init__(self, path1, path2, diffs):
        self.path1 = path1
        self.path2 = path2
        self.diffs = diffs

    def print(self):
        """ Formats the diffs.
        """
        pass


class ConsolePrinter(Printer):
    """Formats the diffs info as the console format.
    """
    def __init__(self, path1, path2, diffs):
        super().__init__(path1, path2, diffs)

    def print(self):
        print(fx.bold(fg.red(PATH1_PREFIX + self.path1)))
        print(fx.bold(fg.green(PATH2_PREFIX + self.path2)))
        print()
        sb = []
        for (op, data) in self.diffs:
            text = data
            if op == dmp.DIFF_INSERT:
                text = text.replace(
                    RET_CHAR,
                    PILCROW_CHAR + fg.default + RET_CHAR + fg.default)
                sb.append(fg.green(text))
            elif op == dmp.DIFF_DELETE:
                text = text.replace('\n', PILCROW_CHAR)
                sb.append(fg.red(text))
            elif op == dmp.DIFF_EQUAL:
                sb.append(text)
        print(''.join(sb))


class HtmlPrinter(Printer):
    """Formats the diffs info as the HTML format.
    """
    def __init__(self, path1, path2, diffs, view_in_browser):
        super().__init__(path1, path2, diffs)
        self.view_in_browser = view_in_browser

    def print(self):
        googdiff = dmp()
        diff_html_span = googdiff.diff_prettyHtml(self.diffs)
        diff_out = DIFF_HTML_TMP % dict(text=diff_html_span,
                                        file1=self.path1,
                                        file2=self.path2)
        if self.view_in_browser:
            with tempfile.NamedTemporaryFile('w',
                                             encoding='utf-8',
                                             suffix='.html',
                                             delete=False) as temp_file:
                temp_file.write(diff_out)
            webbrowser.open('file://%s' % temp_file.name)
        else:
            print(diff_out)


def main():
    parser = argparse.ArgumentParser(
        description='diff tool using Google\'s diff-match-patch')
    parser.add_argument('files', metavar='FILE', type=str, nargs=2)
    parser.add_argument(
        '-c', '--console',
        action='store_true',
        help='Outputs diff info as console text.')
    parser.add_argument(
        '-t', '--html',
        action='store_true',
        help='Outputs diff info as html.')
    parser.add_argument(
        '-b', '--view_in_browser',
        action='store_true',
        help='Outputs diff info as html and open it in web browser.')
    parser.add_argument('--timeout', type=float, default=0)

    args = parser.parse_args()
    path1, path2 = args.files

    googdiff = dmp()
    googdiff.Diff_Timeout = args.timeout
    text1 = open(path1, mode='r', encoding='utf-8').read()
    text2 = open(path2, mode='r', encoding='utf-8').read()
    diffs = googdiff.diff_main(text1, text2, False)
    googdiff.diff_cleanupSemantic(diffs)

    printer = None
    if args.console:
        printer = ConsolePrinter(path1, path2, diffs)
    elif args.html or args.view_in_browser:
        printer = HtmlPrinter(path1, path2, diffs, args.view_in_browser)
    else:
        printer = ConsolePrinter(path1, path2, diffs)

    printer.print()


if __name__ == '__main__':
    main()
